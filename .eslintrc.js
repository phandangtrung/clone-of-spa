// eslint-disable-file no-use-before-define

const a11yOff = Object.keys(require('eslint-plugin-jsx-a11y').rules).reduce((acc, rule) => {
  acc[`jsx-a11y/${rule}`] = 'off';
  return acc;
}, {});

module.exports = {
  root: true,
  env: {
    browser: true,
    node: true,
    es2021: true,
  },
  parser: 'babel-eslint',
  plugins: ['react-prefer-function-component', 'editorconfig'],
  ignorePatterns: [
    'public/*',
    'vite.config.js',
    'tailwind.config.js',
    'windi.config.js',
    'i18next-parser.config.js',
    'postcss.config.js',
    'router.config.js',
  ],
  extends: [
    'eslint:all',
    'plugin:import/recommended',
    'plugin:react/all',
    'airbnb',
    'airbnb/hooks',
    'plugin:react/jsx-runtime',
    'plugin:unicorn/all',
    'plugin:react-prefer-function-component/recommended',
  ],
  rules: {
    'editorconfig/charset': 'error',
    'editorconfig/eol-last': 'error',
    'editorconfig/indent': 'error',
    'editorconfig/linebreak-style': 'error',
    'editorconfig/no-trailing-spaces': 'error',
    'no-trailing-spaces': 'off',
    'object-curly-newline': 'off',
    indent: ['error', 2],
    'react/jsx-indent': ['error', 2],
    'no-multi-spaces': 'off',
    'no-multiple-empty-lines': [
      'error',
      {
        max: 2,
      },
    ],
    'key-spacing': 'off',
    'no-magic-numbers': 'off',
    'no-dupe-else-if': 'error',
    'no-promise-executor-return': 'error',
    'no-unreachable-loop': 'error',
    'no-useless-backreference': 'error',
    'require-atomic-updates': 'error',
    'default-case-last': 'error',
    'grouped-accessor-pairs': 'error',
    'no-constructor-return': 'error',
    'no-implicit-coercion': 'error',
    'prefer-regex-literals': 'error',
    'capitalized-comments': 'error',
    'no-restricted-syntax': [
      'error',
      {
        selector: 'ForInStatement',
        message:
          'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
      },
      {
        selector: 'LabeledStatement',
        message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
      },
      {
        selector: 'WithStatement',
        message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
      },
    ],
    'max-len': ['warn'],
    'no-unused-vars': 'warn',
    'no-void': 'off',
    'linebreak-style': ['error', 'windows'],
    'class-methods-use-this': 'off',
    'arrow-body-style': 'off',
    'no-tabs': 'off',
    'no-mixed-spaces-and-tabs': 'off',
    'no-restricted-exports': 'off',
    'import/no-deprecated': 'error',
    'import/order': 'off',
    'import/no-absolute-path': 'off',
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: ['vite.config.ts'],
      },
    ],
    'template-curly-spacing': 'off',
    'react/jsx-no-undef': 'off',
    'react/no-array-index-key': 'off',
    'react/no-did-update-set-state': 'off',
    'react/jsx-props-no-spreading': 'off',
    'react/destructuring-assignment': 'off',
    'react/no-find-dom-node': 'off',
    'react/no-is-mounted': 'off',
    'react/no-redundant-should-component-update': 'off',
    'react/no-render-return-value': 'off',
    'react/no-string-refs': 'off',
    'react/no-this-in-sfc': 'off',
    'react/no-will-update-set-state': 'off',
    'react/prefer-es6-class': 'off',
    'react/no-unused-state': 'off',
    'react/prefer-stateless-function': 'off',
    'react/require-render-return': 'off',
    'react/sort-comp': 'off',
    'react/state-in-constructor': 'off',
    'react/static-property-placement': 'off',
    'react/jsx-max-props-per-line': [
      'error',
      {
        maximum: 1,
        when: 'multiline',
      },
    ],
    'react/boolean-prop-naming': [
      'error',
      {
        validateNested: true,
      },
    ],
    'react/function-component-definition': 'off',
    'react/no-unstable-nested-components': 'error',
    'react/jsx-indent-props': ['error', 2],
    'react/jsx-first-prop-new-line': 'off',
    'react/jsx-handler-names': 'off',
    'react/jsx-tag-spacing': 'off',
    'react/jsx-key': 'error',
    'react/jsx-no-bind': [
      'error',
      {
        ignoreRefs: false,
        allowArrowFunctions: true,
        allowFunctions: true,
        allowBind: false,
        ignoreDOMComponents: false,
      },
    ],
    'react/jsx-closing-bracket-location': 'off',
    'react/jsx-no-constructed-context-values': 'error',
    'react/jsx-no-script-url': 'error',
    'react/jsx-no-useless-fragment': 'error',
    'react-hooks/exhaustive-deps': 'off',
    'react-hooks/rules-of-hooks': 'off',
    'react/prop-types': 'off',
    'unicorn/no-array-reduce': 'warn',
    'unicorn/prefer-top-level-await': 'off',
    'unicorn/no-object-as-default-parameter': 'off',
    'unicorn/no-static-only-class': 'off',
    'unicorn/no-array-for-each': 'off',
    'unicorn/no-keyword-prefix': 'off',
    'unicorn/filename-case': 'off',
    'unicorn/no-null': 'off',
    'unicorn/prefer-at': 'off',
    'unicorn/consistent-destructuring': 'off',
    'unicorn/no-nested-ternary': ['error'],
    'unicorn/prevent-abbreviations': 'off',
    ...a11yOff,
  },
  settings: {
    react: {
      version: 'detect',
    },
    'import/resolver': {
      alias: {
        map: [['~', './src']],
        extensions: ['.ts', '.js', '.jsx', '.json'],
      },
    },
  },
  overrides: [
    {
      files: ['*.js?(x)'],
      parserOptions: {
        ecmaVersion: 12,
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
  ],
  globals: {
    useTranslation: true,
    http: true,
  },
};
